Object.defineProperty(exports,"__esModule",{value:!0}),exports.TokenRateLimiter=void 0;class TokenRateLimiter{constructor(e){this.rateLimits=e,this.limits={},this.tokensUsedPerMinute={},Object.entries(e).forEach(([e])=>{this.limits[e]={lastInteractionTime:0,totalTokens:0},this.tokensUsedPerMinute[e+": "+Math.floor((new Date).getTime()/6e4)]={[e]:0}})}async submit(e,t){var{lastInteractionTime:i,totalTokens:s}=this.limits[e],o=performance.now();if(o-i<6e4&&this.rateLimits[e]-Math.floor((o-i)/1e3)<s+t){let t=Math.max(0,6e4-(o-i));1e3<t&&console.warn(`Waiting ${t/1e3} seconds before continuing...`),await new Promise(e=>setTimeout(e,t))}this.limits[e]={lastInteractionTime:o,totalTokens:s+t};i=e+": "+Math.floor(o/6e4);this.tokensUsedPerMinute[i]||(this.tokensUsedPerMinute[i]={[e]:0}),this.tokensUsedPerMinute[i][e]+=t}printTokensUsedPerMinute(){console.log("Tokens used per minute:"),Object.keys(this.tokensUsedPerMinute).forEach(e=>{var[t,i]=e.split(":");console.log(`  ${i}: ${t} - ${JSON.stringify((null!=(i=this.tokensUsedPerMinute[e])?i:{})[t],null,2)} tokens`)})}}exports.TokenRateLimiter=TokenRateLimiter;